from fastapi import FastAPI, HTTPException
import uvicorn
from pydantic import BaseModel

app = FastAPI()

books = [
    {"id": 1,
     "title": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ Python",
     "Author": "–ú—ç—Ç—Ç—å—é"},
    {"id": 2,
     "title": "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤ Python",
     "Author": "–ê—Ä—Ç—ë–º"},
]


@app.get(
    "/books",
    tags=['–ö–Ω–∏–≥–∏ üìö'],
    summary='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏ üìö',
)
def read_books():
    return books


@app.get(
    '/books/{id}',
    tags=['–ö–Ω–∏–≥–∏ üìö'],
    summary='–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ id üÜî',
)
def get_book(id: int):
    for book in books:
        if book["id"] == id:
            return book
    raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

class New_book(BaseModel):
    title: str
    author: str


@app.post('/books',
          tags=['–ö–Ω–∏–≥–∏ üìö'],
          summary='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—ÉüÜï')
def add_books(book: New_book):
    books.append({
        'id': len(books) + 1,
        'title': book.title,
        'author': book.author,
    })
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."}


if __name__ == "__main__":
    uvicorn.run("main:app", reload=True)
